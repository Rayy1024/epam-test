{"ast":null,"code":"export const getReadings = async function () {\n  let length = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 1200;\n  const current = Date.now();\n  const hour = 1000 * 60 * 60;\n  return [...new Array(length)].map((_, index) => ({\n    time: current - index * hour,\n    value: Math.random() * 0.7 + 0.4\n  }));\n};\nexport const groupByDay = readings => {\n  const groupedByDay = readings.reduce((curr, _ref) => {\n    let {\n      time,\n      value\n    } = _ref;\n    const readingDate = new Date(time);\n    const day = new Date(readingDate.getFullYear(), readingDate.getMonth(), readingDate.getDate()).getTime();\n    if (!curr[day]) curr[day] = 0;\n    curr[day] += value;\n    return curr;\n  }, {});\n  return Object.entries(groupedByDay).map(_ref2 => {\n    let [day, value] = _ref2;\n    return {\n      time: Number(day),\n      value\n    };\n  });\n};\nexport const sortByTime = readings => {\n  return [...readings].sort((readingA, readingB) => readingA.time - readingB.time);\n};","map":{"version":3,"sources":["/Users/ray/Desktop/epam test/test/src/reading.js"],"names":["getReadings","length","current","Date","now","hour","Array","map","_","index","time","value","Math","random","groupByDay","readings","groupedByDay","reduce","curr","readingDate","day","getFullYear","getMonth","getDate","getTime","Object","entries","Number","sortByTime","sort","readingA","readingB"],"mappings":"AAAA,OAAO,MAAMA,WAAW,GAAG,kBAAyB;AAAA,MAAlBC,MAAkB,uEAAT,IAAS;AAClD,QAAMC,OAAO,GAAGC,IAAI,CAACC,GAAL,EAAhB;AACA,QAAMC,IAAI,GAAG,OAAO,EAAP,GAAY,EAAzB;AACA,SAAO,CAAC,GAAG,IAAIC,KAAJ,CAAUL,MAAV,CAAJ,EAAuBM,GAAvB,CAA2B,CAACC,CAAD,EAAIC,KAAJ,MAAe;AAC/CC,IAAAA,IAAI,EAAER,OAAO,GAAGO,KAAK,GAAGJ,IADuB;AAE/CM,IAAAA,KAAK,EAAEC,IAAI,CAACC,MAAL,KAAgB,GAAhB,GAAsB;AAFkB,GAAf,CAA3B,CAAP;AAID,CAPM;AASP,OAAO,MAAMC,UAAU,GAAIC,QAAD,IAAc;AACtC,QAAMC,YAAY,GAAGD,QAAQ,CAACE,MAAT,CAAgB,CAACC,IAAD,WAA2B;AAAA,QAApB;AAAER,MAAAA,IAAF;AAAQC,MAAAA;AAAR,KAAoB;AAC9D,UAAMQ,WAAW,GAAG,IAAIhB,IAAJ,CAASO,IAAT,CAApB;AACA,UAAMU,GAAG,GAAG,IAAIjB,IAAJ,CACVgB,WAAW,CAACE,WAAZ,EADU,EAEVF,WAAW,CAACG,QAAZ,EAFU,EAGVH,WAAW,CAACI,OAAZ,EAHU,EAIVC,OAJU,EAAZ;AAKA,QAAI,CAACN,IAAI,CAACE,GAAD,CAAT,EAAgBF,IAAI,CAACE,GAAD,CAAJ,GAAY,CAAZ;AAChBF,IAAAA,IAAI,CAACE,GAAD,CAAJ,IAAaT,KAAb;AACA,WAAOO,IAAP;AACD,GAVoB,EAUlB,EAVkB,CAArB;AAYA,SAAOO,MAAM,CAACC,OAAP,CAAeV,YAAf,EAA6BT,GAA7B,CAAiC;AAAA,QAAC,CAACa,GAAD,EAAMT,KAAN,CAAD;AAAA,WAAmB;AACzDD,MAAAA,IAAI,EAAEiB,MAAM,CAACP,GAAD,CAD6C;AAEzDT,MAAAA;AAFyD,KAAnB;AAAA,GAAjC,CAAP;AAID,CAjBM;AAmBP,OAAO,MAAMiB,UAAU,GAAIb,QAAD,IAAc;AACtC,SAAO,CAAC,GAAGA,QAAJ,EAAcc,IAAd,CACL,CAACC,QAAD,EAAWC,QAAX,KAAwBD,QAAQ,CAACpB,IAAT,GAAgBqB,QAAQ,CAACrB,IAD5C,CAAP;AAGD,CAJM","sourcesContent":["export const getReadings = async (length = 1200) => {\n  const current = Date.now();\n  const hour = 1000 * 60 * 60;\n  return [...new Array(length)].map((_, index) => ({\n    time: current - index * hour,\n    value: Math.random() * 0.7 + 0.4,\n  }));\n};\n\nexport const groupByDay = (readings) => {\n  const groupedByDay = readings.reduce((curr, { time, value }) => {\n    const readingDate = new Date(time);\n    const day = new Date(\n      readingDate.getFullYear(),\n      readingDate.getMonth(),\n      readingDate.getDate()\n    ).getTime();\n    if (!curr[day]) curr[day] = 0;\n    curr[day] += value;\n    return curr;\n  }, {});\n\n  return Object.entries(groupedByDay).map(([day, value]) => ({\n    time: Number(day),\n    value,\n  }));\n};\n\nexport const sortByTime = (readings) => {\n  return [...readings].sort(\n    (readingA, readingB) => readingA.time - readingB.time\n  );\n};\n"]},"metadata":{},"sourceType":"module"}