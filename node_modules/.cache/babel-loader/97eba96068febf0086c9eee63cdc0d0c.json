{"ast":null,"code":"import * as chartJs from \"chart.js\";\nlet chart;\n\nconst formatDateLabel = timestamp => {\n  const date = new Date(timestamp);\n  const month = date.getMonth();\n  const day = date.getDate();\n\n  const formatPart = value => {\n    return value < 10 ? `0${value}` : `${value}`;\n  };\n\n  return `${formatPart(day)}/${formatPart(month + 1)}`;\n};\n\nconst renderChart = readings => {\n  chartJs.Chart.defaults.font.size = \"10px\";\n  chartJs.Chart.register.apply(null, Object.values(chartJs).filter(chartClass => chartClass.id));\n  const labels = readings.map(_ref => {\n    let {\n      time\n    } = _ref;\n    return formatDateLabel(time);\n  });\n  const values = readings.map(_ref2 => {\n    let {\n      value\n    } = _ref2;\n    return value;\n  });\n  const data = {\n    labels: labels,\n    datasets: [{\n      label: \"kWh usage\",\n      data: values,\n      fill: true,\n      borderColor: \"rgb(75, 192, 192)\",\n      tension: 0.1,\n      borderWidth: 0.2,\n      backgroundColor: \"#5A8EDA\",\n      borderRadius: 10\n    }]\n  };\n\n  if (chart) {\n    chart.destroy();\n  }\n\n  chart = new chartJs.Chart(\"usageChart\", {\n    type: \"bar\",\n    data: data,\n    options: {\n      scales: {\n        y: {\n          grid: {\n            display: false\n          }\n        },\n        x: {\n          grid: {\n            display: false\n          }\n        }\n      },\n      plugins: {\n        legend: {\n          display: false\n        }\n      },\n      maintainAspectRatio: false\n    }\n  });\n};","map":{"version":3,"sources":["/Users/ray/Desktop/joyofenergy/joyofenergy/src/chart.js"],"names":["chartJs","chart","formatDateLabel","timestamp","date","Date","month","getMonth","day","getDate","formatPart","value","renderChart","readings","Chart","defaults","font","size","register","apply","Object","values","filter","chartClass","id","labels","map","time","data","datasets","label","fill","borderColor","tension","borderWidth","backgroundColor","borderRadius","destroy","type","options","scales","y","grid","display","x","plugins","legend","maintainAspectRatio"],"mappings":"AAAA,OAAO,KAAKA,OAAZ,MAAyB,UAAzB;AAEA,IAAIC,KAAJ;;AAEA,MAAMC,eAAe,GAAIC,SAAD,IAAe;AACrC,QAAMC,IAAI,GAAG,IAAIC,IAAJ,CAASF,SAAT,CAAb;AACA,QAAMG,KAAK,GAAGF,IAAI,CAACG,QAAL,EAAd;AACA,QAAMC,GAAG,GAAGJ,IAAI,CAACK,OAAL,EAAZ;;AAEA,QAAMC,UAAU,GAAIC,KAAD,IAAW;AAC5B,WAAOA,KAAK,GAAG,EAAR,GAAc,IAAGA,KAAM,EAAvB,GAA4B,GAAEA,KAAM,EAA3C;AACD,GAFD;;AAIA,SAAQ,GAAED,UAAU,CAACF,GAAD,CAAM,IAAGE,UAAU,CAACJ,KAAK,GAAG,CAAT,CAAY,EAAnD;AACD,CAVD;;AAYA,MAAMM,WAAW,GAAIC,QAAD,IAAc;AAChCb,EAAAA,OAAO,CAACc,KAAR,CAAcC,QAAd,CAAuBC,IAAvB,CAA4BC,IAA5B,GAAmC,MAAnC;AAEAjB,EAAAA,OAAO,CAACc,KAAR,CAAcI,QAAd,CAAuBC,KAAvB,CACE,IADF,EAEEC,MAAM,CAACC,MAAP,CAAcrB,OAAd,EAAuBsB,MAAvB,CAA+BC,UAAD,IAAgBA,UAAU,CAACC,EAAzD,CAFF;AAKA,QAAMC,MAAM,GAAGZ,QAAQ,CAACa,GAAT,CAAa;AAAA,QAAC;AAAEC,MAAAA;AAAF,KAAD;AAAA,WAAczB,eAAe,CAACyB,IAAD,CAA7B;AAAA,GAAb,CAAf;AACA,QAAMN,MAAM,GAAGR,QAAQ,CAACa,GAAT,CAAa;AAAA,QAAC;AAAEf,MAAAA;AAAF,KAAD;AAAA,WAAeA,KAAf;AAAA,GAAb,CAAf;AAEA,QAAMiB,IAAI,GAAG;AACXH,IAAAA,MAAM,EAAEA,MADG;AAEXI,IAAAA,QAAQ,EAAE,CACR;AACEC,MAAAA,KAAK,EAAE,WADT;AAEEF,MAAAA,IAAI,EAAEP,MAFR;AAGEU,MAAAA,IAAI,EAAE,IAHR;AAIEC,MAAAA,WAAW,EAAE,mBAJf;AAKEC,MAAAA,OAAO,EAAE,GALX;AAMEC,MAAAA,WAAW,EAAE,GANf;AAOEC,MAAAA,eAAe,EAAE,SAPnB;AAQEC,MAAAA,YAAY,EAAE;AARhB,KADQ;AAFC,GAAb;;AAgBA,MAAInC,KAAJ,EAAW;AACTA,IAAAA,KAAK,CAACoC,OAAN;AACD;;AAEDpC,EAAAA,KAAK,GAAG,IAAID,OAAO,CAACc,KAAZ,CAAkB,YAAlB,EAAgC;AACtCwB,IAAAA,IAAI,EAAE,KADgC;AAEtCV,IAAAA,IAAI,EAAEA,IAFgC;AAGtCW,IAAAA,OAAO,EAAE;AACPC,MAAAA,MAAM,EAAE;AACNC,QAAAA,CAAC,EAAE;AACDC,UAAAA,IAAI,EAAE;AACJC,YAAAA,OAAO,EAAE;AADL;AADL,SADG;AAMNC,QAAAA,CAAC,EAAE;AACDF,UAAAA,IAAI,EAAE;AACJC,YAAAA,OAAO,EAAE;AADL;AADL;AANG,OADD;AAaPE,MAAAA,OAAO,EAAE;AACPC,QAAAA,MAAM,EAAE;AACNH,UAAAA,OAAO,EAAE;AADH;AADD,OAbF;AAkBPI,MAAAA,mBAAmB,EAAE;AAlBd;AAH6B,GAAhC,CAAR;AAwBD,CAvDD","sourcesContent":["import * as chartJs from \"chart.js\";\n\nlet chart;\n\nconst formatDateLabel = (timestamp) => {\n  const date = new Date(timestamp);\n  const month = date.getMonth();\n  const day = date.getDate();\n\n  const formatPart = (value) => {\n    return value < 10 ? `0${value}` : `${value}`;\n  };\n\n  return `${formatPart(day)}/${formatPart(month + 1)}`;\n};\n\nconst renderChart = (readings) => {\n  chartJs.Chart.defaults.font.size = \"10px\";\n\n  chartJs.Chart.register.apply(\n    null,\n    Object.values(chartJs).filter((chartClass) => chartClass.id)\n  );\n\n  const labels = readings.map(({ time }) => formatDateLabel(time));\n  const values = readings.map(({ value }) => value);\n\n  const data = {\n    labels: labels,\n    datasets: [\n      {\n        label: \"kWh usage\",\n        data: values,\n        fill: true,\n        borderColor: \"rgb(75, 192, 192)\",\n        tension: 0.1,\n        borderWidth: 0.2,\n        backgroundColor: \"#5A8EDA\",\n        borderRadius: 10,\n      },\n    ],\n  };\n\n  if (chart) {\n    chart.destroy();\n  }\n\n  chart = new chartJs.Chart(\"usageChart\", {\n    type: \"bar\",\n    data: data,\n    options: {\n      scales: {\n        y: {\n          grid: {\n            display: false,\n          },\n        },\n        x: {\n          grid: {\n            display: false,\n          },\n        },\n      },\n      plugins: {\n        legend: {\n          display: false,\n        },\n      },\n      maintainAspectRatio: false,\n    },\n  });\n};\n"]},"metadata":{},"sourceType":"module"}